@page "/p1tlc2combo"

@using Microsoft.EntityFrameworkCore

@attribute [StreamRendering]

@rendermode InteractiveServer

@inject Services.DataService DataService
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<PageTitle>P1 WMS Threading</PageTitle>

<h3>Casing 2</h3>

@if (tlc2_wms != null)
{
<MudDataGrid T="Data.P1TLC2Combo" MultiSelection="false" Hover="true" Hideable="true" @ref="dataGrid" Items="@tlc2_wms" Filterable="true" QuickFilter="@_quickFilter">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Casing 2 List</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ExportToCSV">Export to CSV</MudButton>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.WorkOrder" />
        <PropertyColumn Property="x => x.Length" Format="##.####" />
        <PropertyColumn Property="x => x.DateAndTime" Title="Date and Time" />
    </Columns>

    <PagerContent>
        <MudDataGridPager T="Data.P1TLC2Combo" />
    </PagerContent>
</MudDataGrid>
}
else
{
    <MudProgressLinear Color="Color.Primary" Striped="true" Size="Size.Medium" Indeterminate="true" Class="my-7" />
}

@code {
    private List<Data.P1TLC2Combo>? tlc2_wms = null;

    private string _searchString = "";

    private MudDataGrid<Data.P1TLC2Combo> dataGrid;

    private Func<Data.P1TLC2Combo, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (x.DateAndTime.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{x.Length:##.####}".Contains(_searchString))
            return true;
        if (x.WorkOrder.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            tlc2_wms = await DataService.GetAllWMSP1<Data.P1TLC2Combo>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
            tlc2_wms = new List<Data.P1TLC2Combo>();
        }

    }

    private async Task ExportToCSV()
    {
        try
        {
            if (dataGrid != null)
            {
                await dataGrid.DownloadCsv(JSRuntime, "exported_Casing2_data.csv");
                Snackbar.Add("CSV exported successfully", Severity.Success);
            }
            else
            {
                Snackbar.Add("DataGrid is not initialized", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error exporting CSV: {ex.Message}", Severity.Error);

        }
    }
}
